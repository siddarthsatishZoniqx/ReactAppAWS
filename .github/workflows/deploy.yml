name: CI/CD Pipeline for React App

on: 
    push:
        branches:
        - main

jobs: 
    build:
        runs-on: ubuntu-latest
        
        steps:
          - name: Checkout code
            uses: actions/checkout@v2
            
          - name: Set up Node.js
            uses: actions/setup-node@v2
            with:
                node-version: '14'
        
          - name: Install dependencies
            run: npm install
            
          - name: Build React app
            run: npm run build
            
          - name: Build Docker image
            run: docker build -t react-app .
            
          - name: Log in to Amazon ECR
            env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            run: |
              aws ecr get-login-password --region ${{
secrets.EC2_INSTANCE_REGION }} | docker login --username AWS --password- stdin 058264430728.dkr.ecr.us-east-1.amazonaws.com/reactapp

          - name: Tag and push Docker image to ECR
            run: |
              docker tag react-app:latest 058264430728.dkr.ecr.us-east-1.amazonaws.com/reactapp:latest
              docker push 058264430728.dkr.ecr.us-east-1.amazonaws.com/reactapp:latest
              
          - name: Deploy to EC2
            env:
              EC2_USER: ${{ secrets.EC2_USER }}
              EC2_HOST: ${{ secrets.EC2_HOST }}
              EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
            run: |
              echo "$EC2_SSH_KEY" > key.pem
              chmod 400 key.pem
              scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml
    $EC2_USER@$EC2_HOST:~/docker-compose.yml
              ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << 'EOF'
                  docker-compose -f ~/docker-compose.yml down
                  docker-compose -f ~/docker-compose.yml up -d
    EOF
